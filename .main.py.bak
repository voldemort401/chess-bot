import pygame
from pygame.locals import *
#start_pos = "rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1"

## we are starting from 2 because 
## 0 represents empty space -1 represents white squares and 1 represents black squares

# white pieces first 3 letters represent the color 
# 0x1 for black
# 0x0 for white


WROOK   =   "0x0010"
WKNIGHT =   "0x0111" 
WBISHOP =   "0x0101"   
WKING   =   "0x0000"  
WQUEEN  =   "0x0110"   
WPAWN   =   "0x0100"

BROOK =     "0x1010" 
BKNIGHT =   "0x1111"  
BBISHOP =   "0x1101" 
BKING =     "0x1000" 
BQUEEN =    "0x1110" 
BPAWN =     "0x1011"  

EMPTY = "-0x1"
BLACK = "0x1" 
WHITE = "0x0"


board = [BROOK,     BKNIGHT,      BBISHOP,      BQUEEN,     BKING,  BBISHOP,    BKNIGHT,    BROOK,
         BPAWN,     BPAWN,        BPAWN,        BPAWN,      BPAWN,  BPAWN,      BPAWN,      BPAWN,             
         EMPTY,     EMPTY,        EMPTY,        EMPTY,      EMPTY,  EMPTY,      EMPTY,      EMPTY,
         EMPTY,     EMPTY,        EMPTY,        EMPTY,      EMPTY,  EMPTY,      EMPTY,      EMPTY,
         EMPTY,     EMPTY,        EMPTY,        EMPTY,      EMPTY,  EMPTY,      EMPTY,      EMPTY,
         EMPTY,     EMPTY,        EMPTY,        EMPTY,      EMPTY,  EMPTY,      EMPTY,      EMPTY,
         WPAWN,     WPAWN,        WPAWN,        WPAWN,      WPAWN,  WPAWN,      WPAWN,      WPAWN, # we put the black pieces first to show the white pieces at the front bascially think the board being rendered from last to first
         WROOK,     WKNIGHT,      WBISHOP,      WQUEEN,     WKING,  WBISHOP,    WKNIGHT,    WROOK,]

board_color = [WHITE,  BLACK,  WHITE, BLACK, WHITE, BLACK, WHITE,   BLACK,
               BLACK,  WHITE,  BLACK, WHITE, BLACK, WHITE, BLACK,   WHITE,
               WHITE,  BLACK,  WHITE, BLACK, WHITE, BLACK, WHITE,   BLACK,
               BLACK,  WHITE,  BLACK, WHITE, BLACK, WHITE, BLACK,   WHITE,
               WHITE,  BLACK,  WHITE, BLACK, WHITE, BLACK, WHITE,   BLACK,
               BLACK,  WHITE,  BLACK, WHITE, BLACK, WHITE, BLACK,   WHITE,
               WHITE,  BLACK,  WHITE, BLACK, WHITE, BLACK, WHITE,   BLACK,
               BLACK,  WHITE,  BLACK, WHITE, BLACK, WHITE, BLACK,   WHITE]

board_sqs = ['a8', 'b8', 'c8', 'd8', 'e8', 'f8', 'g8', 'h8',
             'a7', 'b7', 'c7', 'd7', 'e7', 'f7', 'g7', 'h7',
             'a6', 'b6', 'c6', 'd6', 'e6', 'f6', 'g6', 'h6',
             'a5', 'b5', 'c5', 'd5', 'e5', 'f5', 'g5', 'h5',
             'a4', 'b4', 'c4', 'd4', 'e4', 'f4', 'g4', 'h4', 
             'a3', 'b3', 'c3', 'd3', 'e3', 'f3', 'g3', 'h3',
             'a2', 'b2', 'c2', 'd2', 'e2', 'f2', 'g2', 'h2',    
             'a1', 'b1', 'c1', 'd1', 'e1', 'f1', 'g1', 'h1',]                            

edges = ["a1", "b1", "c1", "d1", "e1", "f1", "g1", "h1",
         "a8", "b8", "c8", "d8", "e8", "f8", "g8", "h8",
         "a2", "a3", "a4", "a5", "a6", "a7",
         "h2", "h3", "h4", "h5", "h6", "h7"]


def read_fen(fen: str) -> list[str]: 
    turn = WHITE if (fen.find('w') != -1) else BLACK
    board: list[str] = [] ## specify that this list contains values of type int we dont need to do it I just want the warnings to go away!!    
    for i,j in enumerate(fen):
        if (i <= fen.find('w') or i<= fen.find(' b ')):
            try:
                for k in range(int(fen[i])):
                    board.append(EMPTY)                

            except ValueError:
                ## LOWERCASE BLACK    UPPERCASE WHITE 
                if (j == 'n'): # black knigh 
                    board.append(BKNIGHT)
                if (j == 'k'):                     
                    board.append(BKING)
                if (j == 'r'):
                    board.append(BROOK)
                if (j == 'b'): 
                    board.append(BBISHOP)
                if (j == 'p'): 
                    board.append(BPAWN)
                if (j == 'q'):                    
                    board.append(BQUEEN)
                if (j == 'N'):                     
                    board.append(WKNIGHT)
                if (j == 'K'):                    
                    board.append(WKING)
                if (j == 'R'):
                    board.append(WROOK)
                if (j == 'B'): 
                    board.append(WBISHOP)
                if (j == 'P'): 
                    board.append(WPAWN)
                if (j == 'Q'):                   
                    board.append(WQUEEN)

    board.append(turn)
    return board 

class PseudoLegalMoves:
    def __init__(self):
        pass
    
    ## theres a bug fix it later     
    def _rook(self,pos_piece: str, board: list[str]) -> list[int | None]:
        turn = board[-1] # because turn is at the last (val: -1 for black anything else for white)
        pos = []
        
        piece = board[board_sqs.index(pos_piece)]
        color = BLACK if (piece==BROOK) else WHITE 

        if (piece == EMPTY):
            return []

        if (color == turn):     
            piece_index = board.index(piece) 
            piece_index2 = board.index(piece)
            above= hex(0x0) 
            isSamecolor = hex(0x0)
            vertical_mvs = 0
            

            
            if (board[piece_index-8] != EMPTY ):
                above = 1  # if we dont check outside the loop then it gets stuck in an infinite loop 
                isSamecolor = True if (board[piece_index-8][:3] == piece[:3]) else False  

            elif (board[piece_index+8]!=EMPTY):
               above = -1    
               isSamecolor = True if (board[piece_index+8][:3] == piece[:3]) else False  

            elif (board[piece_index-8] != EMPTY and board[piece_index+8] != EMPTY):
                above = 2   
                ## check if both the pieces are samecolor
                isSamecolor = True if (board[piece_index+8][:3] == turn and board[piece_index-8][:3] == turn) else False
                
            elif (board[piece_index-8] == EMPTY and board[piece_index+8] == EMPTY or board[piece_index-8] == EMPTY or board[piece_index+8]== EMPTY):  # if  there is no pieces in the file
                above = 0 
                isSamecolor = None

            canMovebackwards = False if (piece_index in range(8) or piece_index in range(56,63)) else True
            
                        
            if ( above == hex(0x0) or isSamecolor == hex(0x0) ):
                print("ERR: " + str(above) + " " + str(isSamecolor))

            for i in range(8):
                ## veritcal moves only
                if (vertical_mvs == 0):
                    if (above == 1 and isSamecolor):
                        pass 
                    
                    elif (above == 0 and isSamecolor == None):  ## there is no pieces on the file 
                        if (canMovebackwards):
                            piece_index +=8 
                        else:
                            break
                        if (piece_index >= 64):
                            piece_index2 -= 8 
                            if (piece_index2 < 0):
                                break;
                            pos.append(piece_index2)
                        else:
                            pos.append(piece_index)

                    elif (above == -1 and isSamecolor):
                        pass 
                    elif (above == 2):
                        print(canMovebackwards)
                        # samecolor in both directions 
                        if (isSamecolor):
                            vertical_mvs = -1
                        
                        # samecolor in one direction  
                        elif (board[piece_index+8][:3] != turn): 
                            piece_index+=8
                            pos.append(piece_index)

                        elif (board[piece_index-8][:3] != turn): 
                            if (canMovebackwards): 
                                piece_index-=8
                                pos.append(piece_index)
                            else:
                                break
                        # samecolor in no direction 
                        elif (board[piece_index+8][:3] != turn and board[piece_index-8][:3] != turn):
                           piece_index+=8 
                           if ( canMovebackwards): 
                               piece_index-=8
                               pos.append(piece_index)
                           else:
                               break;
                           pos.append(piece_index)
                           piece_index-=16 ## because 8 has already been added above  
                           pos.append(piece_index)

                        piece_index -= 8
                        if ( canMovebackwards): 
                               piece_index-=8
                               pos.append(piece_index)
                        else:
                            break;
                        if (piece_index < 0 or piece_index >= 64): ## ensures that the position doesnt go out of bounds
                            break;
                        if (board[piece_index] == -1):
                            break;

                        if (board[piece_index] != EMPTY):
                            pass
                            if (board[piece_index][:3] != turn):
                                pos.append(piece_index)
                                break
                            else:
                                break
                        pos.append(piece_index)



                    if (above == 1):
                        # pieces at the edge of the board would just warp to another side of the board without this 
                        if (canMovebackwards): 
                               piece_index+=8
                               pos.append(piece_index)
                        else:
                            break;

                        if (board[piece_index] == -1):
                            break;

                        if (piece_index < 0 or piece_index >= 64):
                            break;

                        elif (board[piece_index] == -1):
                            break;

                        if (board[piece_index] != EMPTY):
                            pass
                            if (board[piece_index][:3] != turn):
                                pos.append(piece_index)
                                break
                            else:
                                break
                        pos.append(piece_index)
                
            ## horizontal movements
            piece_index = board.index(piece)
            piece_index2 = board.index(piece)
            piece_sq = board_sqs[piece_index] # find the pos of the piece in algebric notation 
            file,rank = piece_sq
            for i in range(8):
                if (board_sqs[piece_index2+1][1] != rank): ## piece_index2 because piece_index changes everytime the loop runs
                    if (board[piece_index-1] != EMPTY and board[piece_index-1][:3] == turn):
                        break; 
                    elif (board[piece_index-1] == EMPTY):
                        piece_index -=1
                        pos.append(piece_index)
                    elif (board[piece_index-1] != EMPTY and board[piece_index-1][:3] != turn):
                        pos.append(piece_index-1)
                        break;
                if (board_sqs[piece_index2-1][1] != rank):
                    if (board[piece_index+1] != EMPTY and board[piece_index+1][:3] == turn):
                        break 
                    elif (board[piece_index+1] == EMPTY):
                        piece_index +=1
                        pos.append(piece_index)
                    elif (board[piece_index+1] != EMPTY and board[piece_index+1][:3] != turn):
                        pos.append(piece_index+1)
                        break;

        
        return pos
    

    def _bishop(self,piece_pos: str, board: list[str] ) -> list[int | str]: 
        if (board[board_sqs.index(piece_pos)] != BBISHOP and board[board_sqs.index(piece_pos)] != WBISHOP ):
            print(board[board_sqs.index(piece_pos)])
            return ['piece is not a bishop'] 
        current_pos = board_sqs.index(piece_pos)
        color       = board[current_pos][:3]
        PIECE_POS = board_sqs.index(piece_pos)
        possible_pos = [] 
        pve9 = True 
        pve7 = False 

        nve9 = True
        nve7 = False 

        #comments time ::: pve9 or pve7  is to say like hey we can do +7 or +9 and get the actual squares the bishop can move and if the 
        # values are false it means stop right there dont do anymore we already got the values we need 

        for i in range(8):
            if (board_sqs[current_pos] in edges):
                if (current_pos > PIECE_POS):  
                    current_pos=PIECE_POS
                    pve7 = True
                    pve9 = False 

            if (pve9):    
                current_pos+=9
                if (board[current_pos] == EMPTY):
                    possible_pos.append(current_pos)
                elif (board[current_pos][:3] == color):
                    pve9 = False 

                elif (board[current_pos][:3] != color):
                    possible_pos.append(current_pos)
                    pve9 = False 

            if (pve7):
                current_pos+=7
                if (board[current_pos] == EMPTY):
                    possible_pos.append(current_pos)

                elif (board[current_pos][:3] != color ):
                    possible_pos.append(current_pos)
                    pve7 = False 
                elif (board[current_pos][:3] == color):
                    pve7 = False
                elif (board_sqs[current_pos] in edges):
                    possible_pos.append(current_pos)
                    pve7 = False

        current_pos = PIECE_POS
        for i in range(8):
            if (board_sqs[current_pos] in edges):
                if (current_pos < PIECE_POS):
                    current_pos=PIECE_POS
                    nve9 = False 
                    nve7 = True

            if (nve9):    
                current_pos -= 9
                if (board[current_pos] == EMPTY):
                    possible_pos.append(current_pos)
                elif (board[current_pos][:3] == color):
                    nve9 = False 

                elif (board[current_pos][:3] != color):
                    possible_pos.append(current_pos)
                    nve9 = False 

            if (nve7):
                current_pos -= 7
                if (board[current_pos] == EMPTY):
                    possible_pos.append(current_pos)
                elif (board[current_pos][:3] != color ):
                    possible_pos.append(current_pos)
                    nve7 = False 
                elif (board[current_pos][:3] == color):
                    nve7 = False
                elif (board_sqs[current_pos] in edges):
                    possible_pos.append(current_pos)
                    nve7 = False



        possible_pos=set(possible_pos)
       
        return list(possible_pos)
    
    def _queen(self, piece_pos: str, board: list[str]):
        return self._bishop(piece_pos, board) + self._rook(piece_pos,board)

    ## TODO ENPASSANT
    def _pawn(self,piece_pos:str, board:list[str]):
        current_pos     = board_sqs.index(piece_pos)
        if (board[current_pos] != WPAWN and board[current_pos] != BPAWN):
            return ['piece is not a pawn']
        if (current_pos == -1):
            return "invalid square"
        row,column      = piece_pos
        color           = BLACK if (board[current_pos][:3] == BLACK) else WHITE
        wmoved          = True
        bmoved          = True
        possible_pos    = []
        print(row, column)

        if (column == 2 and board[current_pos] == WPAWN):
            wmoved = False 
        elif (column == 7 and board[current_pos] == BPAWN):
            bmoved = False

        for i in range(2):
            if (not wmoved):
                current_pos-=8 
                if (board[current_pos] != EMPTY):
                    break 

                possible_pos.append(current_pos)
                possible_pos.append(current_pos-8) 
            elif (not bmoved):
                current_pos += 8  
                if (board[current_pos] != EMPTY):
                    break
                possible_pos.append(current_pos)
                possible_pos.append(current_pos+8)
            else:
                if (color == WHITE):
                    current_pos -= 8 
                    if (board[current_pos] != EMPTY):
                        break
                elif (color == BLACK):
                    current_pos+=8
                    if (board[current_pos]!= EMPTY):
                        break
                possible_pos.append(current_pos)
                break


            if (board[current_pos+7] != EMPTY and board[current_pos+7][:3] == color):
                pass
            elif (board[current_pos+7] != EMPTY and board[current_pos+7][:3] != color):
                possible_pos.append(current_pos+7)
            if (board[current_pos+9] != EMPTY and board[current_pos+9][:3] == color):
                pass
            elif (board[current_pos+9] != EMPTY and board[current_pos+9][:3] != color):
                possible_pos.append(current_pos+9)

            

        return possible_pos

    def _king(self, piece_pos: str, board: list[str]):
        current_pos = board_sqs.index(piece_pos)

        if (board[current_pos] != WKING and board[current_pos] != BKING):
            return ['the piece is not a king']

        color = board[current_pos][:3] 
        possible_moves = []    
        if (board[current_pos+9] != EMPTY and board[current_pos+9][:3] != color):
            pass
        if (board[current_pos-9] != EMPTY and board[current_pos-9][:3] != color):
            pass 
        if (board[current_pos+8] != EMPTY and board[current_pos+9][:3] != color):
            pass
        if (board[current_pos-8] != EMPTY and board[current_pos-9][:3] != color):
            pass 
        if (board[current_pos+7] != EMPTY and board[current_pos+9][:3] != color):
            pass
        if (board[current_pos-7] != EMPTY and board[current_pos-9][:3] != color):
            pass 
        if (board[current_pos+1] != EMPTY and board[current_pos+9][:3] != color):
            pass
        if (board[current_pos-1] != EMPTY and board[current_pos-9][:3] != color):
            pass 


        if (board[current_pos+9] == EMPTY ):
            possible_moves.append(current_pos+9)
        if (board[current_pos-9] == EMPTY ):
            possible_moves.append(current_pos-9)
        if (board[current_pos+8] == EMPTY ):
            possible_moves.append(current_pos+8)
        if (board[current_pos-8] == EMPTY ):
            possible_moves.append(current_pos-8)
        if (board[current_pos+7] == EMPTY ):
            possible_moves.append(current_pos+7)
        if (board[current_pos-7] == EMPTY ):
            possible_moves.append(current_pos-7)
        if (board[current_pos+1] == EMPTY ):
            possible_moves.append(current_pos+1)
        if (board[current_pos-1] == EMPTY ):
            possible_moves.append(current_pos-1)
 

        return possible_moves
        

class draw_brd:
    def __init__(self):
        self.height  : int = 518 ## : int makes the warnings go away
        self.breadth : int = 518
        self.running : int = True


        pygame.init() 
        self.screen :  pygame.surface.Surface    = pygame.display.set_mode((self.height, self.breadth), DOUBLEBUF) 
        self.bg     :  pygame.surface.Surface    = pygame.image.load('board.png').convert_alpha()

        self.W_ROOK  : pygame.surface.Surface = pygame.image.load('W_rook.png').convert_alpha() 
        self.W_KNIGHT: pygame.surface.Surface = pygame.image.load('W_knight.png').convert_alpha() 
        self.W_BISHOP: pygame.surface.Surface = pygame.image.load('W_bishop.png').convert_alpha() 

        self.W_KING :  pygame.surface.Surface = pygame.image.load('W_king.png').convert_alpha()
        self.W_QUEEN:  pygame.surface.Surface = pygame.image.load('W_queen.png').convert_alpha()

        self.B_ROOK  : pygame.surface.Surface   =   pygame.image.load('B_rook.png').convert_alpha() 
        self.B_KNIGHT: pygame.surface.Surface   = pygame.image.load('B_knight.png').convert_alpha() 
        self.B_BISHOP: pygame.surface.Surface   = pygame.image.load('B_bishop.png').convert_alpha()
        self.B_KING  : pygame.surface.Surface   =   pygame.image.load('B_king.png').convert_alpha()
        self.B_QUEEN : pygame.surface.Surface   =  pygame.image.load('B_queen.png').convert_alpha()

        self.W_PAWN  : pygame.surface.Surface   = pygame.image.load('W_pawn.png').convert_alpha()
        self.B_PAWN  : pygame.surface.Surface   = pygame.image.load('B_pawn.png').convert_alpha()
         

    def _events(self):
        for event in pygame.event.get():
            if (event.type == pygame.QUIT):
                self.running = False

    def _main_loop(self, board: list[str], sqs:list[int]):
        self.screen.blit(self.bg)
        pieces = pygame.Rect((0,0,64,64))
        p = pygame.Rect((0,0,64,64))
        color = ""

        mx,my = pygame.mouse.get_pos()
        mouse_sq = pygame.Rect(mx,my,12,12)
        
        for i in range(64):
            #if (board_color[i] == BLACK):
            #    color = "black"
            #if (board_color[i] == WHITE):
            #     color="white"


            ## RENDERING THE PIECES 
            if (board[i] == WPAWN):
                self.screen.blit(self.W_PAWN,(pieces.x-10, pieces.y-20)) 
            if (board[i] == WBISHOP):
                self.screen.blit(self.W_BISHOP,(pieces.x-10, pieces.y-20)) 
            if (board[i] == WROOK):
                self.screen.blit(self.W_ROOK,(pieces.x-10, pieces.y-20)) 
            if (board[i] == WKING):
                self.screen.blit(self.W_KING,(pieces.x-10, pieces.y-20)) 
            if (board[i] == WQUEEN):
                self.screen.blit(self.W_QUEEN,(pieces.x-10, pieces.y-20)) 
            if (board[i] == WKNIGHT):
                self.screen.blit(self.W_KNIGHT,(pieces.x-10, pieces.y-20)) 

            if (board[i] == BPAWN):
                self.screen.blit(self.B_PAWN,(pieces.x-10, pieces.y+5)) 
            if (board[i] == BBISHOP):
                self.screen.blit(self.B_BISHOP,(pieces.x-10, pieces.y+5)) 
            if (board[i] == BROOK):
                self.screen.blit(self.B_ROOK,(pieces.x-10, pieces.y+5)) 
            if (board[i] == BKING):
                self.screen.blit(self.B_KING,(pieces.x-10, pieces.y+5)) 
            if (board[i] == BQUEEN):
                self.screen.blit(self.B_QUEEN,(pieces.x-10, pieces.y+5))  
            if (board[i] == BKNIGHT):
                self.screen.blit(self.B_KNIGHT,(pieces.x-10, pieces.y+5)) 

            if (i in sqs):
                color="green"
                pygame.draw.rect(self.screen,color,pieces)


            pieces.x += 69 
            i+=1
            if (i%8 == 0):
                pieces.y += 69  # nice (¬‿¬)
                pieces.x -= 69*8
            """
            if (pygame.mouse.get_just_pressed()[0] and mouse_sq.colliderect(pieces)):
                clicked = board[i]
                index = i 
                turn = board[-1]
                PseudoMvs=PseudoLegalMoves()
                if (clicked == WROOK or clicked == BROOK):
                    moves = (PseudoMvs._rook(index,board))
                    if (moves == []):
                        break 
                    
                    else:
                        if (index in moves):
                            if (pygame.mouse.get_just_pressed()[0] and mouse_sq.colliderect(pieces)):
                                if (board[i] == EMPTY or board[i][:3] != turn and i in moves):
                                    pass
            """


        pygame.display.flip()

    def exec(self, board:list[str], sqs:list[int]):
        while (self.running):
            self._events()
            self._main_loop(board, sqs)



board = read_fen("8/8/8/8/3KKK2/3KKK2/3KKK2/8 w - - 0 1")
##piece = BROOK
#index = board.index(piece)
#print(board)
#print(index)
mv= PseudoLegalMoves()
print(mv._king('e3', board))
brd = draw_brd()
#brd.exec(board, mv._bishop('e3', board))
